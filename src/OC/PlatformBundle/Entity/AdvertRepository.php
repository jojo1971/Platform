<?php

namespace OC\PlatformBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;
use Symfony\Component\Validator\Constraints\DateTime;

/**
 * AdvertRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AdvertRepository extends \Doctrine\ORM\EntityRepository
{
     public function getAdvertWithCategories(array $categoryNames)
  {
        $qb = $this->createQueryBuilder('a');

        // On fait une jointure avec l'entité Category avec pour alias « c »
        $qb
          ->join('a.categories', 'c')
          ->addSelect('c')
        ;

        // Puis on filtre sur le nom des catégories à l'aide d'un IN
        $qb->where($qb->expr()->in('c.name', $categoryNames));
        // La syntaxe du IN et d'autres expressions se trouve dans la documentation Doctrine

        // Enfin, on retourne le résultat
        return $qb
          ->getQuery()
          ->getResult()
    ;
  }
    
    public function getAdverts($page, $nbPerPage){
        $query = $this->createQueryBuilder('a')
            ->leftJoin('a.image','i')
            ->addSelect('i')
            ->leftJoin('a.categories','c')
            ->addSelect('c')
            ->orderBy('a.date','DESC')
            ->getQuery();

        $query
            ->setFirstResult(($page-1) * $nbPerPage)
            ->setMaxResults($nbPerPage);
        
        return new Paginator($query, true);
    }

    public function whereCurrentYear(\Doctrine\ORM\QueryBuilder $qb){
        $qb->andWhere('a.date BETWEEN :debut AND :FIN')
            ->setParameter('debut', new \DateTime(('Y').'01/01'))
            ->setParameter('fin', new \DateTime(('Y').'31/12'));
        return $qb;
    }
    
    public function myFind(){
        $qb = $this->createQueryBuilder('a')

            ->leftJoin('a.applications', 'n' )
            ->addSelect('n')
          ->select('a.applications');


        return$qb->getQuery()->getResult();
    }

    public function purge($date){
        $q = $this->createQueryBuilder('a');
        $q
            ->where('a.date = :date')
            ->setParameter('date', $date);


        return $q
            ->getQuery()
            ->getResult();
        
    }
  public  function getPublishedQueryBuilder(){
      return $this
          ->createQueryBuilder('a')
          ->where('a.published = :published')
          ->setParameter('published', true);
  }
}